
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

package analizadores;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Asintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public Asintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Asintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Asintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\054\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\011\004\000\002\011\003\000\002\010\005" +
    "\000\002\010\005\000\002\012\003\000\002\012\002\000" +
    "\002\013\004\000\002\013\003\000\002\015\012\000\002" +
    "\007\006\000\002\007\002\000\002\016\011\000\002\017" +
    "\004\000\002\017\005\000\002\006\006\000\002\006\003" +
    "\000\002\003\004\000\002\004\022\000\002\005\010\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\020\005\000\002\020\005\000\002\020\005" +
    "\000\002\020\005\000\002\020\004\000\002\020\003\000" +
    "\002\020\005\000\002\020\004\000\002\021\005\000\002" +
    "\021\005\000\002\021\005\000\002\021\005\000\002\021" +
    "\005\000\002\021\005\000\002\021\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\151\000\030\002\ufff9\004\026\005\012\006\030\010" +
    "\010\027\025\031\020\032\013\034\005\035\016\036\006" +
    "\001\002\000\006\002\ufffa\026\ufffa\001\002\000\004\025" +
    "\146\001\002\000\004\040\145\001\002\000\026\002\ufff9" +
    "\004\026\005\012\006\030\010\010\027\025\032\013\034" +
    "\005\035\016\036\006\001\002\000\004\036\137\001\002" +
    "\000\044\002\uffef\004\uffef\005\uffef\006\uffef\010\uffef\012" +
    "\052\013\053\014\050\015\055\016\054\026\uffef\027\uffef" +
    "\031\uffef\032\uffef\034\uffef\035\uffef\036\uffef\001\002\000" +
    "\062\002\uffdf\004\uffdf\005\uffdf\006\uffdf\010\uffdf\012\uffdf" +
    "\013\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf\020\uffdf\021" +
    "\uffdf\022\uffdf\023\uffdf\024\uffdf\026\uffdf\027\uffdf\030\uffdf" +
    "\031\uffdf\032\uffdf\034\uffdf\035\uffdf\036\uffdf\001\002\000" +
    "\004\025\124\001\002\000\030\002\uffe6\004\uffe6\005\uffe6" +
    "\006\uffe6\010\uffe6\026\uffe6\027\uffe6\032\uffe6\034\uffe6\035" +
    "\uffe6\036\uffe6\001\002\000\030\002\uffe9\004\uffe9\005\uffe9" +
    "\006\uffe9\010\uffe9\026\uffe9\027\uffe9\032\uffe9\034\uffe9\035" +
    "\uffe9\036\uffe9\001\002\000\006\036\122\037\121\001\002" +
    "\000\030\002\ufffd\004\ufffd\005\ufffd\006\ufffd\010\ufffd\027" +
    "\ufffd\031\020\032\ufffd\034\ufffd\035\ufffd\036\ufffd\001\002" +
    "\000\004\040\115\001\002\000\030\002\ufff7\004\026\005" +
    "\012\006\030\010\010\026\ufff7\027\025\032\013\034\005" +
    "\035\016\036\006\001\002\000\004\002\uffff\001\002\000" +
    "\030\002\uffeb\004\uffeb\005\uffeb\006\uffeb\010\uffeb\026\uffeb" +
    "\027\uffeb\032\uffeb\034\uffeb\035\uffeb\036\uffeb\001\002\000" +
    "\030\002\uffe5\004\uffe5\005\uffe5\006\uffe5\010\uffe5\026\uffe5" +
    "\027\uffe5\032\uffe5\034\uffe5\035\uffe5\036\uffe5\001\002\000" +
    "\012\005\012\011\111\027\046\036\006\001\002\000\004" +
    "\037\110\001\002\000\030\002\uffe7\004\uffe7\005\uffe7\006" +
    "\uffe7\010\uffe7\026\uffe7\027\uffe7\032\uffe7\034\uffe7\035\uffe7" +
    "\036\uffe7\001\002\000\004\025\035\001\002\000\030\002" +
    "\uffe8\004\uffe8\005\uffe8\006\uffe8\010\uffe8\026\uffe8\027\uffe8" +
    "\032\uffe8\034\uffe8\035\uffe8\036\uffe8\001\002\000\004\002" +
    "\034\001\002\000\030\002\uffea\004\uffea\005\uffea\006\uffea" +
    "\010\uffea\026\uffea\027\uffea\032\uffea\034\uffea\035\uffea\036" +
    "\uffea\001\002\000\004\002\001\001\002\000\004\031\036" +
    "\001\002\000\004\040\037\001\002\000\004\005\040\001" +
    "\002\000\004\026\041\001\002\000\004\025\042\001\002" +
    "\000\012\005\012\025\045\027\046\036\006\001\002\000" +
    "\010\023\064\024\063\026\100\001\002\000\024\012\052" +
    "\013\053\014\050\015\055\016\054\017\071\020\072\021" +
    "\070\022\073\001\002\000\012\005\012\025\045\027\046" +
    "\036\006\001\002\000\010\005\012\027\046\036\006\001" +
    "\002\000\016\012\052\013\053\014\050\015\055\016\054" +
    "\030\051\001\002\000\010\005\012\027\046\036\006\001" +
    "\002\000\062\002\uffde\004\uffde\005\uffde\006\uffde\010\uffde" +
    "\012\uffde\013\uffde\014\uffde\015\uffde\016\uffde\017\uffde\020" +
    "\uffde\021\uffde\022\uffde\023\uffde\024\uffde\026\uffde\027\uffde" +
    "\030\uffde\031\uffde\032\uffde\034\uffde\035\uffde\036\uffde\001" +
    "\002\000\010\005\012\027\046\036\006\001\002\000\010" +
    "\005\012\027\046\036\006\001\002\000\062\002\uffe0\004" +
    "\uffe0\005\uffe0\006\uffe0\010\uffe0\012\uffe0\013\uffe0\014\uffe0" +
    "\015\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023" +
    "\uffe0\024\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0" +
    "\034\uffe0\035\uffe0\036\uffe0\001\002\000\010\005\012\027" +
    "\046\036\006\001\002\000\062\002\uffe1\004\uffe1\005\uffe1" +
    "\006\uffe1\010\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1\016" +
    "\054\017\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1" +
    "\026\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\034\uffe1\035" +
    "\uffe1\036\uffe1\001\002\000\062\002\uffe3\004\uffe3\005\uffe3" +
    "\006\uffe3\010\uffe3\012\uffe3\013\uffe3\014\050\015\055\016" +
    "\054\017\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3" +
    "\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3\034\uffe3\035" +
    "\uffe3\036\uffe3\001\002\000\062\002\uffe4\004\uffe4\005\uffe4" +
    "\006\uffe4\010\uffe4\012\uffe4\013\uffe4\014\050\015\055\016" +
    "\054\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4" +
    "\026\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4\034\uffe4\035" +
    "\uffe4\036\uffe4\001\002\000\062\002\uffe2\004\uffe2\005\uffe2" +
    "\006\uffe2\010\uffe2\012\uffe2\013\uffe2\014\uffe2\015\uffe2\016" +
    "\054\017\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2" +
    "\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2\034\uffe2\035" +
    "\uffe2\036\uffe2\001\002\000\010\023\064\024\063\026\065" +
    "\001\002\000\012\005\012\025\045\027\046\036\006\001" +
    "\002\000\012\005\012\025\045\027\046\036\006\001\002" +
    "\000\010\023\uffd6\024\uffd6\026\uffd6\001\002\000\010\023" +
    "\uffdc\024\uffdc\026\uffdc\001\002\000\010\023\uffdb\024\uffdb" +
    "\026\uffdb\001\002\000\010\005\012\027\046\036\006\001" +
    "\002\000\010\005\012\027\046\036\006\001\002\000\010" +
    "\005\012\027\046\036\006\001\002\000\010\005\012\027" +
    "\046\036\006\001\002\000\022\012\052\013\053\014\050" +
    "\015\055\016\054\023\uffd9\024\uffd9\026\uffd9\001\002\000" +
    "\022\012\052\013\053\014\050\015\055\016\054\023\uffd8" +
    "\024\uffd8\026\uffd8\001\002\000\022\012\052\013\053\014" +
    "\050\015\055\016\054\023\uffd7\024\uffd7\026\uffd7\001\002" +
    "\000\022\012\052\013\053\014\050\015\055\016\054\023" +
    "\uffda\024\uffda\026\uffda\001\002\000\004\025\101\001\002" +
    "\000\004\007\102\001\002\000\004\040\103\001\002\000" +
    "\004\026\104\001\002\000\004\025\105\001\002\000\026" +
    "\004\026\005\012\006\030\010\010\026\ufff9\027\025\032" +
    "\013\034\005\035\016\036\006\001\002\000\004\026\107" +
    "\001\002\000\030\002\uffed\004\uffed\005\uffed\006\uffed\010" +
    "\uffed\026\uffed\027\uffed\032\uffed\034\uffed\035\uffed\036\uffed" +
    "\001\002\000\030\002\uffee\004\uffee\005\uffee\006\uffee\010" +
    "\uffee\026\uffee\027\uffee\032\uffee\034\uffee\035\uffee\036\uffee" +
    "\001\002\000\010\005\012\027\046\036\006\001\002\000" +
    "\016\012\052\013\053\014\050\015\055\016\054\030\113" +
    "\001\002\000\032\002\ufff0\004\ufff0\005\ufff0\006\ufff0\010" +
    "\ufff0\026\ufff0\027\ufff0\031\ufff0\032\ufff0\034\ufff0\035\ufff0" +
    "\036\ufff0\001\002\000\006\002\ufff8\026\ufff8\001\002\000" +
    "\012\005\012\027\025\036\006\040\116\001\002\000\030" +
    "\002\ufffc\004\ufffc\005\ufffc\006\ufffc\010\ufffc\027\ufffc\031" +
    "\ufffc\032\ufffc\034\ufffc\035\ufffc\036\ufffc\001\002\000\030" +
    "\002\ufffb\004\ufffb\005\ufffb\006\ufffb\010\ufffb\027\ufffb\031" +
    "\ufffb\032\ufffb\034\ufffb\035\ufffb\036\ufffb\001\002\000\026" +
    "\002\ufffe\004\ufffe\005\ufffe\006\ufffe\010\ufffe\027\ufffe\032" +
    "\ufffe\034\ufffe\035\ufffe\036\ufffe\001\002\000\030\002\ufff2" +
    "\004\ufff2\005\ufff2\006\ufff2\010\ufff2\026\ufff2\027\ufff2\032" +
    "\ufff2\034\ufff2\035\ufff2\036\ufff2\001\002\000\004\040\123" +
    "\001\002\000\030\002\ufff1\004\ufff1\005\ufff1\006\ufff1\010" +
    "\ufff1\026\ufff1\027\ufff1\032\ufff1\034\ufff1\035\ufff1\036\ufff1" +
    "\001\002\000\012\005\012\025\045\027\046\036\006\001" +
    "\002\000\010\023\064\024\063\026\126\001\002\000\004" +
    "\025\127\001\002\000\026\004\026\005\012\006\030\010" +
    "\010\026\ufff9\027\025\032\013\034\005\035\016\036\006" +
    "\001\002\000\004\026\131\001\002\000\032\002\ufff4\004" +
    "\ufff4\005\ufff4\006\ufff4\010\ufff4\026\ufff4\027\ufff4\032\ufff4" +
    "\033\132\034\ufff4\035\ufff4\036\ufff4\001\002\000\004\025" +
    "\134\001\002\000\030\002\ufff6\004\ufff6\005\ufff6\006\ufff6" +
    "\010\ufff6\026\ufff6\027\ufff6\032\ufff6\034\ufff6\035\ufff6\036" +
    "\ufff6\001\002\000\026\004\026\005\012\006\030\010\010" +
    "\026\ufff9\027\025\032\013\034\005\035\016\036\006\001" +
    "\002\000\004\026\136\001\002\000\030\002\ufff5\004\ufff5" +
    "\005\ufff5\006\ufff5\010\ufff5\026\ufff5\027\ufff5\032\ufff5\034" +
    "\ufff5\035\ufff5\036\ufff5\001\002\000\004\040\140\001\002" +
    "\000\004\025\141\001\002\000\026\004\026\005\012\006" +
    "\030\010\010\026\ufff9\027\025\032\013\034\005\035\016" +
    "\036\006\001\002\000\004\026\143\001\002\000\030\002" +
    "\uffec\004\uffec\005\uffec\006\uffec\010\uffec\026\uffec\027\uffec" +
    "\032\uffec\034\uffec\035\uffec\036\uffec\001\002\000\004\002" +
    "\000\001\002\000\062\002\uffdd\004\uffdd\005\uffdd\006\uffdd" +
    "\010\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd\016\uffdd\017" +
    "\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd\026\uffdd" +
    "\027\uffdd\030\uffdd\031\uffdd\032\uffdd\034\uffdd\035\uffdd\036" +
    "\uffdd\001\002\000\012\005\012\025\045\027\046\036\006" +
    "\001\002\000\010\023\064\024\063\026\150\001\002\000" +
    "\004\025\151\001\002\000\026\004\026\005\012\006\030" +
    "\010\010\026\ufff9\027\025\032\013\034\005\035\016\036" +
    "\006\001\002\000\004\026\153\001\002\000\030\002\ufff3" +
    "\004\ufff3\005\ufff3\006\ufff3\010\ufff3\026\ufff3\027\ufff3\032" +
    "\ufff3\034\ufff3\035\ufff3\036\ufff3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\151\000\036\002\031\003\026\004\013\005\023\006" +
    "\030\010\016\011\006\012\021\013\003\014\020\015\022" +
    "\016\032\017\014\020\010\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\003\026\004\013" +
    "\005\023\006\030\012\143\013\003\014\020\015\022\016" +
    "\032\017\014\020\010\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\010\016" +
    "\011\117\001\001\000\002\001\001\000\026\003\026\004" +
    "\013\005\023\006\030\013\113\014\020\015\022\016\032" +
    "\017\014\020\010\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\020\043\021\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\020" +
    "\043\021\061\001\001\000\004\020\046\001\001\000\002" +
    "\001\001\000\004\020\060\001\001\000\002\001\001\000" +
    "\004\020\057\001\001\000\004\020\056\001\001\000\002" +
    "\001\001\000\004\020\055\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\020\043\021\066\001\001\000\006\020" +
    "\043\021\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\076\001\001\000\004\020" +
    "\075\001\001\000\004\020\074\001\001\000\004\020\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\003\026\004\013\005\023\006\030\012\105\013\003" +
    "\014\020\015\022\016\032\017\014\020\010\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\111\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\006\116\020\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\020\043" +
    "\021\124\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\003\026\004\013\005\023\006\030\012\127\013\003" +
    "\014\020\015\022\016\032\017\014\020\010\001\001\000" +
    "\002\001\001\000\004\007\132\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\003\026\004\013\005\023\006" +
    "\030\012\134\013\003\014\020\015\022\016\032\017\014" +
    "\020\010\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\003\026\004\013" +
    "\005\023\006\030\012\141\013\003\014\020\015\022\016" +
    "\032\017\014\020\010\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\020" +
    "\043\021\146\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\003\026\004\013\005\023\006\030\012\151\013" +
    "\003\014\020\015\022\016\032\017\014\020\010\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Asintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Asintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Asintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String resultado="";
    public static LinkedList<TError> TablaES = new LinkedList<TError>(); 

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

        TError datos = new TError(lexema,fila,columna,"Error Sintactico","Caracter no esperado");
        TablaES.add(datos);
       
        
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

        TError datos = new TError(lexema,fila,columna,"Error Sintactico","Caracter no esperado");
        TablaES.add(datos);
     
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Asintactico$actions {



  private final Asintactico parser;

  /** Constructor */
  CUP$Asintactico$actions(Asintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Asintactico$do_action_part00000000(
    int                        CUP$Asintactico$act_num,
    java_cup.runtime.lr_parser CUP$Asintactico$parser,
    java.util.Stack            CUP$Asintactico$stack,
    int                        CUP$Asintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Asintactico$result;

      /* select the action based on the action number */
      switch (CUP$Asintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		RESULT = start_val;
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Asintactico$parser.done_parsing();
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Declaraciones bloquedeSentencias 
            {
              String RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= bloquedeSentencias 
            {
              String RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Declaraciones ::= declaracion Declaraciones 
            {
              String RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("Declaraciones",7, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Declaraciones ::= declaracion 
            {
              String RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("Declaraciones",7, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaracion ::= set identificador identificador 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		System.out.println(a);
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("declaracion",6, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaracion ::= set identificador sentexp 
            {
              String RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("declaracion",6, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // bloquedeSentencias ::= sentencias 
            {
              String RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("bloquedeSentencias",8, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // bloquedeSentencias ::= 
            {
              String RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("bloquedeSentencias",8, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sentencias ::= sentencia sentencias 
            {
              String RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("sentencias",9, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sentencias ::= sentencia 
            {
              String RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("sentencias",9, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sentif ::= IF Labre cond Lcierra Labre bloquedeSentencias Lcierra sentelse 
            {
              String RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("sentif",11, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sentelse ::= ELSE Labre bloquedeSentencias Lcierra 
            {
              String RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("sentelse",5, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sentelse ::= 
            {
              String RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("sentelse",5, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sentwhile ::= WHILE Labre cond Lcierra Labre bloquedeSentencias Lcierra 
            {
              String RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("sentwhile",12, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sentputs ::= puts cadena_texto 
            {
              String RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("sentputs",13, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sentputs ::= puts $ identificador 
            {
              String RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("sentputs",13, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sentexp ::= Cabre expr exp Cciera 
            {
              String RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("sentexp",4, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sentexp ::= exp 
            {
              String RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("sentexp",4, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sentcom ::= comentario cadena_texto 
            {
              String RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("sentcom",1, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sentfor ::= FOR Labre set identificador num Lcierra Labre cond Lcierra Labre incr identificador Lcierra Labre bloquedeSentencias Lcierra 
            {
              String RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("sentfor",2, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-15)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sentwhitch ::= SWITCH $ identificador Labre bloquedeSentencias Lcierra 
            {
              String RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("sentwhitch",3, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sentencia ::= sentif 
            {
              String RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sentencia ::= sentwhile 
            {
              String RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // sentencia ::= sentputs 
            {
              String RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // sentencia ::= sentexp 
            {
              String RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // sentencia ::= sentcom 
            {
              String RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // sentencia ::= sentfor 
            {
              String RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sentencia ::= sentwhitch 
            {
              String RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // exp ::= exp mas exp 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		 int a1 = Integer.parseInt(a);
                            int b1 = Integer.parseInt(b);
                            int c = a1+b1;
                         System.out.println(c);  
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("exp",14, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // exp ::= exp menos exp 
            {
              String RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("exp",14, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // exp ::= exp por exp 
            {
              String RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("exp",14, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // exp ::= exp div exp 
            {
              String RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("exp",14, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // exp ::= exp pot 
            {
              String RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("exp",14, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // exp ::= num 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		String b = String.valueOf(a); RESULT = b ; 
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("exp",14, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // exp ::= Cabre exp Cciera 
            {
              String RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("exp",14, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // exp ::= $ identificador 
            {
              String RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("exp",14, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // cond ::= cond or cond 
            {
              String RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("cond",15, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // cond ::= cond and cond 
            {
              String RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("cond",15, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // cond ::= exp menor exp 
            {
              String RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("cond",15, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // cond ::= exp mayor exp 
            {
              String RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("cond",15, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // cond ::= exp dist exp 
            {
              String RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("cond",15, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // cond ::= exp comp exp 
            {
              String RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("cond",15, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // cond ::= Labre cond Lcierra 
            {
              String RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("cond",15, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Asintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Asintactico$do_action(
    int                        CUP$Asintactico$act_num,
    java_cup.runtime.lr_parser CUP$Asintactico$parser,
    java.util.Stack            CUP$Asintactico$stack,
    int                        CUP$Asintactico$top)
    throws java.lang.Exception
    {
              return CUP$Asintactico$do_action_part00000000(
                               CUP$Asintactico$act_num,
                               CUP$Asintactico$parser,
                               CUP$Asintactico$stack,
                               CUP$Asintactico$top);
    }
}

}
